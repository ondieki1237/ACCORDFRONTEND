{
  "info": {
    "name": "KMHFR Local API - Postman Collection (Express on :5000)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Elaborate Postman collection to test a local Express backend that wraps KMHFR data. Base URL defaults to {{baseUrl}}. Replace placeholders in the environment file before running requests."
  },
  "item": [
    {
      "name": "Health / Basic",
      "description": "Health checks and app-level endpoints",
      "item": [
        {
          "name": "GET - Health (ping)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "health"
              ]
            },
            "description": "Simple health endpoint for the Express app. Optional."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response is JSON when code 200', function(){",
                  "        pm.response.to.have.header('Content-Type');",
                  "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET - App Status (/api/status)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/status",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "status"
              ]
            },
            "description": "Another common status endpoint. Useful if implemented."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Body not empty', function () { pm.expect(pm.response.text()).to.not.equal(''); });"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Facilities - Search & Listing",
      "item": [
        {
          "name": "GET - Search (proxy) - /api/facilities/search",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/facilities/search?name={{name}}&county={{county}}&limit={{limit}}&page={{page}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "facilities",
                "search"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{name}}"
                },
                {
                  "key": "county",
                  "value": "{{county}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                }
              ]
            },
            "description": "Search facilities by name/county (the Express wrapper). Provide variables in environment."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Has JSON body or results array', function() {",
                  "    var ok=false;",
                  "    try{ var j = pm.response.json();",
                  "         ok = Array.isArray(j) || Array.isArray(j.results) || (typeof j.count !== 'undefined');",
                  "    } catch(e) { ok=false; }",
                  "    pm.expect(ok).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET - List facilities (/api/facilities)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/facilities?limit=10&page=1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "facilities"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "page",
                  "value": "1"
                }
              ]
            },
            "description": "List facilities. Tests check for array or paginated results."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Response returns facilities list', function(){",
                  "    var j = pm.response.json();",
                  "    pm.expect(Array.isArray(j) || Array.isArray(j.results)).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET - Filter by county & ward (/api/facilities)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/facilities?county={{countyId}}&ward={{wardId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "facilities"
              ],
              "query": [
                {
                  "key": "county",
                  "value": "{{countyId}}"
                },
                {
                  "key": "ward",
                  "value": "{{wardId}}"
                }
              ]
            },
            "description": "Filter facilities by countyId and wardId. Use the common endpoints to fetch valid county/ward ids."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Either array or object with results', function(){",
                  "  var j = pm.response.json();",
                  "  pm.expect(Array.isArray(j) || Array.isArray(j.results)).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Facility - Details & Report",
      "item": [
        {
          "name": "GET - Facility detail (/api/facilities/:id)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/facilities/{{facilityId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "facilities",
                "{{facilityId}}"
              ]
            },
            "description": "Get full facility detail by id (UUID or numeric id depending on your implementation). Replace {{facilityId}} in environment."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', function(){ pm.response.to.have.status(200); });",
                  "pm.test('Has id and name fields (if JSON)', function(){",
                  "   try {",
                  "     var j = pm.response.json();",
                  "     pm.expect(j).to.have.property('id');",
                  "     pm.expect(j).to.have.property('name');",
                  "   } catch(e) { pm.fail('Response was not JSON or missing fields'); }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET - Facility report (JSON) (/api/facilities/:id/report)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/facilities/{{facilityId}}/report?format=json",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "facilities",
                "{{facilityId}}",
                "report"
              ],
              "query": [
                {
                  "key": "format",
                  "value": "json"
                }
              ]
            },
            "description": "Get structured readiness/equipment report as JSON."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', function(){ pm.response.to.have.status(200); });",
                  "pm.test('Report contains facility object', function(){",
                  "  var j = pm.response.json();",
                  "  pm.expect(j).to.have.property('facility');",
                  "  pm.expect(j).to.have.property('summary');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET - Facility report (PDF) (/api/facilities/:id/report.pdf)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/pdf"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/facilities/{{facilityId}}/report?format=pdf",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "facilities",
                "{{facilityId}}",
                "report"
              ],
              "query": [
                {
                  "key": "format",
                  "value": "pdf"
                }
              ]
            },
            "description": "Request a PDF stream. Postman will download the response when 'Send and Download' is used."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200 or 201', function(){ pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                  "pm.test('Content-Type PDF', function(){",
                  "  pm.expect(pm.response.headers.get('Content-Type')).to.include('pdf');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET - Facility Services (/api/facilities/:id/services)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/facilities/{{facilityId}}/services",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "facilities",
                "{{facilityId}}",
                "services"
              ]
            },
            "description": "List services (if your wrapper exposes this)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', function(){ pm.response.to.have.status(200); });",
                  "pm.test('Response is array or object', function(){",
                  "  var j = pm.response.json();",
                  "  pm.expect(Array.isArray(j) || typeof j === 'object').to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET - Facility Infrastructure (/api/facilities/:id/infrastructure)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/facilities/{{facilityId}}/infrastructure",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "facilities",
                "{{facilityId}}",
                "infrastructure"
              ]
            },
            "description": "Infrastructure/equipment list for a facility (wrapper endpoint)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', function(){ pm.response.to.have.status(200); });",
                  "pm.test('Has array or object infrastructure', function(){",
                  "  var j = pm.response.json();",
                  "  pm.expect(Array.isArray(j) || typeof j === 'object').to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Common / Metadata Endpoints",
      "item": [
        {
          "name": "GET - Counties (/api/common/counties)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/common/counties",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "common",
                "counties"
              ]
            },
            "description": "List of counties. Use returned IDs for filters."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('200', function(){ pm.response.to.have.status(200); });",
                  "pm.test('Response is array or object', function(){",
                  "  var j = pm.response.json(); pm.expect(Array.isArray(j) || typeof j === 'object').to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET - Wards by county (/api/common/wards?county={{countyId}})",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/common/wards?county={{countyId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "common",
                "wards"
              ],
              "query": [
                {
                  "key": "county",
                  "value": "{{countyId}}"
                }
              ]
            },
            "description": "Get wards filtered by county (if supported)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('200', function(){ pm.response.to.have.status(200); });",
                  "pm.test('List or results present', function(){",
                  "  var j = pm.response.json(); pm.expect(Array.isArray(j) || Array.isArray(j.results)).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET - Service Catalog (/api/facilities/services)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/facilities/services",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "facilities",
                "services"
              ]
            },
            "description": "Service catalog used to map service ids to names."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('200', function(){ pm.response.to.have.status(200); });",
                  "pm.test('Has array or object', function(){ var j = pm.response.json(); pm.expect(Array.isArray(j) || typeof j === 'object').to.be.true; });"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET - Facility Types (/api/facilities/facility_types)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/facilities/facility_types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "facilities",
                "facility_types"
              ]
            },
            "description": "Facility types (hospital, clinic, health centre) useful for UI filtering."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('200', function(){ pm.response.to.have.status(200); });",
                  "pm.test('Has types', function(){ var j = pm.response.json(); pm.expect(Array.isArray(j) || typeof j === 'object').to.be.true; });"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Auth / Admin (if implemented)",
      "item": [
        {
          "name": "POST - Auth Login (/api/auth/login)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            },
            "description": "Login to get token. If your wrapper uses a different path, update accordingly."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Expect 200/201', function(){ pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                  "pm.test('Response has token', function(){",
                  "  try { var j = pm.response.json(); pm.expect(j).to.have.property('token'); pm.environment.set('token', j.token); }",
                  "  catch(e){ pm.fail('No JSON token in response'); }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET - Auth current user (/api/auth/me)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "me"
              ]
            },
            "description": "Get current user details (requires Authorization header)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', function(){ pm.response.to.have.status(200); });",
                  "pm.test('Has username/email', function(){ var j = pm.response.json(); pm.expect(j).to.have.property('username') || pm.expect(j).to.have.property('email'); });"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Edge Cases & Error Testing",
      "item": [
        {
          "name": "GET - Invalid facility id",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/facilities/invalid-id-test-000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "facilities",
                "invalid-id-test-000"
              ]
            },
            "description": "Send a malformed id to validate error handling and status code (expect 4xx)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Expect 4xx or 404', function(){ pm.expect(pm.response.code).to.be.within(400,499); });"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET - Not found UUID (all-zero)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/facilities/00000000-0000-0000-0000-000000000000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "facilities",
                "00000000-0000-0000-0000-000000000000"
              ]
            },
            "description": "Non-existent UUID to check 404 behavior."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Expect 404 or 4xx', function(){ pm.expect(pm.response.code).to.be.within(400,499); });"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ]
}